{"version":3,"sources":["components/statistics/statistics.module.css","components/options/options.module.css","components/options/Options.js","components/notification/Notification.js","components/statistics/Statistics.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","FeedbackOptions","onLeaveGoodFB","onLeaveNeutralFB","onLeaveBadFB","onClick","className","s","good","neutral","bad","Notification","message","Statistics","total","percentage","list","item","App","useState","countGood","setCountGood","countBad","setCountBad","countNeutral","setCountNeutral","setTotal","setPercentage","useEffect","state","Math","round","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2IACAA,EAAOC,QAAU,CAAC,KAAO,yBAAyB,KAAO,2B,iBCAzDD,EAAOC,QAAU,CAAC,KAAO,sBAAsB,IAAM,qBAAqB,QAAU,2B,iKCErE,SAASC,EAAT,GAIX,IAHFC,EAGC,EAHDA,cACAC,EAEC,EAFDA,iBACAC,EACC,EADDA,aAEA,OACE,gCACE,wBAAQC,QAASH,EAAeI,UAAWC,IAAEC,KAA7C,kBAGA,wBAAQH,QAASF,EAAkBG,UAAWC,IAAEE,QAAhD,qBAGA,wBAAQJ,QAASD,EAAcE,UAAWC,IAAEG,IAA5C,oBCdS,SAASC,EAAT,GAAoC,IAAZC,EAAW,EAAXA,QACrC,OAAO,4BAAIA,I,oBCAE,SAASC,EAAT,GAAgE,IAA1CL,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,QAASC,EAA0B,EAA1BA,IAAKI,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,WAC9D,OACE,qBAAIT,UAAWC,IAAES,KAAjB,UACE,qBAAIV,UAAWC,IAAEU,KAAjB,kBACO,+BAAOT,OAEd,qBAAIF,UAAWC,IAAEU,KAAjB,qBACU,+BAAOR,OAEjB,qBAAIH,UAAWC,IAAEU,KAAjB,iBACM,+BAAOP,OAEb,qBAAIJ,UAAWC,IAAEU,KAAjB,kBACO,+BAAOH,OAEd,qBAAIR,UAAWC,IAAEU,KAAjB,+BACoB,iCAAOF,EAAP,aCqCXG,MAlDf,WACE,MAAkCC,mBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAgCF,mBAAS,GAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAAwCJ,mBAAS,GAAjD,mBAAOK,EAAP,KAAqBC,EAArB,KACA,EAA0BN,mBAAS,GAAnC,mBAAOL,EAAP,KAAcY,EAAd,KACA,EAAoCP,mBAAS,GAA7C,mBAAOJ,EAAP,KAAmBY,EAAnB,KAsBA,OARAC,qBAAU,WACRF,GAAS,SAAAG,GAAK,OAAIT,EAAYE,EAAWE,OACxC,CAACJ,EAAWE,EAAUE,IAEzBI,qBAAU,WACRD,GAAc,SAAAE,GAAK,OAAIC,KAAKC,MAAOX,EAAYN,EAAS,UACvD,CAACM,EAAWE,EAAUE,EAAcV,IAGrC,0BAASR,UAAU,UAAnB,UACE,gDACA,cAAC,EAAD,CACEJ,cAxBc,WAClBmB,GAAa,SAAAQ,GAAK,OAAIA,EAAQ,MAwB1B1B,iBAjBiB,WACrBsB,GAAgB,SAAAI,GAAK,OAAIA,EAAQ,MAiB7BzB,aAtBa,WACjBmB,GAAY,SAAAM,GAAK,OAAIA,EAAQ,QAuBhB,IAAVf,EACC,cAACH,EAAD,CAAcC,QAAQ,sBAEtB,cAACC,EAAD,CACEL,KAAMY,EACNX,QAASe,EACTd,IAAKY,EACLR,MAAOA,EACPC,WAAYA,QCrCPiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.286b314b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"statistics_list__W9a-h\",\"item\":\"statistics_item__13Zam\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"good\":\"options_good__3HS3L\",\"bad\":\"options_bad__7n9-k\",\"neutral\":\"options_neutral__25EI5\"};","import PropTypes from 'prop-types';\nimport s from './options.module.css';\n\nexport default function FeedbackOptions({\n  onLeaveGoodFB,\n  onLeaveNeutralFB,\n  onLeaveBadFB,\n}) {\n  return (\n    <div>\n      <button onClick={onLeaveGoodFB} className={s.good}>\n        Good\n      </button>\n      <button onClick={onLeaveNeutralFB} className={s.neutral}>\n        Neutral\n      </button>\n      <button onClick={onLeaveBadFB} className={s.bad}>\n        Bad\n      </button>\n    </div>\n  );\n}\n\nFeedbackOptions.propTypes = {\n  onLeaveGoodFB: PropTypes.func,\n  onLeaveNeutralFB: PropTypes.func,\n  onLeaveBadFB: PropTypes.func,\n};\n","import PropTypes from 'prop-types';\n\nexport default function Notification({ message }) {\n  return <p>{message}</p>;\n}\n\nNotification.propTypes = {\n  message: PropTypes.string,\n};\n","import PropTypes from 'prop-types';\nimport s from './statistics.module.css';\n\nexport default function Statistics({ good, neutral, bad, total, percentage }) {\n  return (\n    <ul className={s.list}>\n      <li className={s.item}>\n        Good <span>{good}</span>\n      </li>\n      <li className={s.item}>\n        Neutral <span>{neutral}</span>\n      </li>\n      <li className={s.item}>\n        Bad <span>{bad}</span>\n      </li>\n      <li className={s.item}>\n        Total<span>{total}</span>\n      </li>\n      <li className={s.item}>\n        Positive feedback <span>{percentage}%</span>\n      </li>\n    </ul>\n  );\n}\n\nStatistics.propTypes = {\n  good: PropTypes.number,\n  neutral: PropTypes.number,\n  bad: PropTypes.number,\n  total: PropTypes.number,\n  percentage: PropTypes.number,\n};\n","import './App.css';\nimport { useState, useEffect } from 'react';\nimport Options from './components/options/Options';\nimport Notification from './components/notification/Notification';\nimport Statistics from './components/statistics/Statistics';\n\nfunction App() {\n  const [countGood, setCountGood] = useState(0);\n  const [countBad, setCountBad] = useState(0);\n  const [countNeutral, setCountNeutral] = useState(0);\n  const [total, setTotal] = useState(0);\n  const [percentage, setPercentage] = useState(0);\n\n  const countGoodFB = () => {\n    setCountGood(state => state + 1);\n  };\n\n  const countBadFB = () => {\n    setCountBad(state => state + 1);\n  };\n\n  const countNeutralFB = () => {\n    setCountNeutral(state => state + 1);\n  };\n\n  useEffect(() => {\n    setTotal(state => countGood + countBad + countNeutral);\n  }, [countGood, countBad, countNeutral]);\n\n  useEffect(() => {\n    setPercentage(state => Math.round((countGood / total) * 100));\n  }, [countGood, countBad, countNeutral, total]);\n\n  return (\n    <section className=\"section\">\n      <h2>Leave feedback</h2>\n      <Options\n        onLeaveGoodFB={countGoodFB}\n        onLeaveNeutralFB={countNeutralFB}\n        onLeaveBadFB={countBadFB}\n      />\n      {total === 0 ? (\n        <Notification message=\"No feedback given\" />\n      ) : (\n        <Statistics\n          good={countGood}\n          neutral={countNeutral}\n          bad={countBad}\n          total={total}\n          percentage={percentage}\n        />\n      )}\n    </section>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}